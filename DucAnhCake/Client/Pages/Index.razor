@page "/muahang"
@using DucAnhCake.Shared
@inject IMenuService MenuService
@inject IOrderService orderService

<p></p><br />
<p></p><br />

<div class="chinhlaipadding">
    @if (State.Menu.Cakes.Any()) {
    <!-- Menu -->
<CakeList Title="Vui lòng chọn bánh"
    Items="@State.Menu.Cakes"
    ButtonTitle="Chọn"
    ButtonClass="btn btn-success pl-4 pr-4"
    Selected="@AddToBasket" />
<!-- End menu -->
<!-- Shopping Basket -->
<ShoppingBasket Orders="@State.Basket.Orders"
    GetCakeFromId="@State.Menu.GetCake"
    Selected="@RemoveFromBasket" />

<!-- End shopping basket -->
<!-- Customer entry -->
<CustomerEntry Title="Nhập thông tin khách hàng"
    @bind-Customer="@State.Basket.Customer"
    ButtonTitle="Thanh toán"
    ButtonClass="mx-auto w-25 btn btn-success"
    ValidSubmit="PlaceOrder" />
<!-- End customer entry -->
}
else {
    <div class="mx-auto text-center mb-3 mt-3">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
</div>
@code {
    private State State { get; } = new State();

    protected override async Task OnInitializedAsync() {
        Menu menu = await MenuService.GetMenu();
        foreach (Cake cake in menu.Cakes) {
            State.Menu.Add(cake);
        }
    }

    //private string SpicinessImage(Spiciness spiciness)
    //    => $"images/{spiciness.ToString().ToLower()}.png";

    private void AddToBasket(Cake cake)
        => State.Basket.Add(cake.Id);

    private void RemoveFromBasket(int pos)
        => State.Basket.RemoveAt(pos);

    /*private void PlaceOrder() {
        Console.WriteLine("Placing order");
    }*/
    private async Task PlaceOrder() {
        await orderService.PlaceOrder(State.Basket);
    }
}
